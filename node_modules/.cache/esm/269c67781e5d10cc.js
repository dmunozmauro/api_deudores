let express,AdministracionCursoService;_1e5‍.x([["default",()=>_1e5‍.o]]);_1e5‍.w("express",[["default",["express"],function(v){express=v}]]);_1e5‍.w("../service",[["AdministracionCursoService",["AdministracionCursoService"],function(v){AdministracionCursoService=v}]]);


const app = express()
const router = express.Router()
app.use('/cap/administracion-curso', router)

/**
 * @swagger
 * /cap/administracion-curso/obtener/listado-curso:
 *  get:
 *      tags: 
 *          - Administracion curso
 *      summary: Obtiene listado curso
 *      description:  Obtiene listado curso
 *      responses:
 *          200:
 *              description: Devuelve mensaje OK.
 *          500:
 *              description: Devuelve mensaje de No OK.
 */
router.get('/obtener/listado-curso', AdministracionCursoService.obtener_listado_curso)

/**
 * @swagger
 * /cap/administracion-curso/obtener/facilitadores:
 *  get:
 *      tags: 
 *          - Administracion curso
 *      summary: Obtiene facilitadores
 *      description:  Obtiene facilitadores
 *      responses:
 *          200:
 *              description: Devuelve mensaje OK.
 *          500:
 *              description: Devuelve mensaje de No OK.
 */
router.get('/obtener/facilitadores', AdministracionCursoService.obtener_facilitadores)


/**
 * @swagger
 * /cap/administracion-curso/crear:
 *  post:
 *      tags: 
 *          - Administracion curso
 *      summary: Crear curso
 *      description: Crear curso
 *      requestBody:
 *          description: Crear curso
 *          required: true
 *          content:
 *              "application/json":
 *                  schema:
 *                      type: object
 *      responses:
 *          200:
 *              description: Devuelve mensaje OK.
 *          500:
 *              description: Devuelve mensaje de No OK.
 */
router.post('/crear', AdministracionCursoService.crear_curso)

/**
 * @swagger
 * /cap/administracion-curso/obtener/datos-editar/{id}:
 *  get:
 *      tags: 
 *          - Administracion curso
 *      summary: Obtiene datos editar
 *      description:  Obtiene datos editar
 *      responses:
 *          200:
 *              description: Devuelve mensaje OK.
 *          500:
 *              description: Devuelve mensaje de No OK.
 *  parameters:
 *      -   name: id
 *          in: path
 *          required: true
 */
router.get('/obtener/datos-editar/:id', AdministracionCursoService.obtener_datos_editar)

/**
 * @swagger
 * /cap/administracion-curso/editar:
 *  post:
 *      tags: 
 *          - Administracion curso
 *      summary: Edita curso
 *      description: Edita curso
 *      requestBody:
 *          description: curso a editar
 *          required: true
 *          content:
 *              "application/json":
 *                  schema:
 *                      type: object
 *      responses:
 *          200:
 *              description: Devuelve mensaje OK.
 *          500:
 *              description: Devuelve mensaje de No OK.
 */
router.post('/editar', AdministracionCursoService.editar_curso)

/**
 * @swagger
 * /cap/administracion-curso/eliminar/{id}:
 *  get:
 *      tags: 
 *          - Administracion curso
 *      summary: Elimina curso
 *      description: Elimina curso
 *      requestBody:
 *          description: curso a eliminar
 *          required: true
 *          content:
 *              "application/json":
 *                  schema:
 *                      type: object
 *      responses:
 *          200:
 *              description: Devuelve mensaje OK.
 *          500:
 *              description: Devuelve mensaje de No OK.
 *  parameters:
 *      -   name: id
 *          in: path
 *          required: true
 */
router.get('/eliminar/:id', AdministracionCursoService.eliminar_curso)

/**
 * @swagger
 * /cap/administracion-curso/publicar/{id}:
 *  get:
 *      tags: 
 *          - Administracion curso
 *      summary: Publicar curso
 *      description: Publicar curso
 *      requestBody:
 *          description: Curso a publicar
 *          required: true
 *          content:
 *              "application/json":
 *                  schema:
 *                      type: object
 *      responses:
 *          200:
 *              description: Devuelve mensaje OK.
 *          500:
 *              description: Devuelve mensaje de No OK.
 *  parameters:
 *      -   name: id
 *          in: path
 *          required: true
 */
router.get('/publicar/:id', AdministracionCursoService.publicar_curso)

_1e5‍.d(app);
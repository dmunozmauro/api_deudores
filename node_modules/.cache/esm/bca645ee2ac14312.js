let sequel,QueryTypes;_2ac‍.x([["obtener_listado_curso",()=>obtener_listado_curso],["obtener_facilitadores",()=>obtener_facilitadores],["crear_curso",()=>crear_curso],["obtener_datos_editar",()=>obtener_datos_editar],["editar_curso",()=>editar_curso],["eliminar_curso",()=>eliminar_curso],["publicar_curso",()=>publicar_curso],["validar_curso",()=>validar_curso]]);_2ac‍.w("..",[["sequel",["sequel"],function(v){sequel=v}]]);_2ac‍.w("sequelize",[["QueryTypes",["QueryTypes"],function(v){QueryTypes=v}]]);


       const obtener_listado_curso = async () => {

    const query = ` select 
                        ctc.id,
                        ctc.codigo,
                        ctc.nombre,
                        ccec.estado,
                        to_char(ctc.fecha_inicio,'dd-mm-yyyy') as fecha_inicio,
                        to_char(ctc.fecha_termino,'dd-mm-yyyy') as fecha_termino,
                        ctc.id_cargo_operativo
                    from cap_tal_curso ctc 
                    inner join cap_cal_estado_curso ccec on ctc.id_estado = ccec.id  `

    const rows = await sequel.query(query, { type: QueryTypes.SELECT });

    const list = []
    for (let item of rows) {
        const obj = {}
        obj.id = item.id
        obj.codigo = item.codigo
        obj.nombre = item.nombre
        obj.estado = item.estado
        obj.fecha_inicio = item.fecha_inicio
        obj.fecha_termino = item.fecha_termino
        obj.id_cargo_operativo = item.id_cargo_operativo
        list.push(obj)
    }

    return list
}

       const obtener_facilitadores = async () => {

    const query = ` select 
                        ccf.id,
                        ptu.user_name ||' '|| ptu.user_father_last_name ||' '|| ptu.user_mother_last_name  as nombre
                    from cap_cal_facilitador ccf 
                    inner join pro_tal_user ptu on ccf.user_bid = ptu.user_bid
                    where active`

    const rows = await sequel.query(query, { type: QueryTypes.SELECT });

    const list = []
    for (let item of rows) {
        const obj = {}
        obj.id = item.id
        obj.nombre = item.nombre
        list.push(obj)
    }

    return list
}

       const crear_curso = async (req, DataImagenPortada, trx = null) => {
    let { imagenPortada, nombre, descripcion, codigo, etiqueta, cargoOperativo, facilitador, fechaInicio, fechaTermino, evaluacionPonderacion, idUsuarioCreador } = req.body;
    let mensaje = 'OK'

    let query_existe = `    select 
                                id 
                            from cap_tal_curso 
                            where upper(codigo) = ('${codigo}') `

    const rows = await sequel.query(query_existe, { type: QueryTypes.SELECT });

    let existe = false
    for (let item of rows) {
        existe = true
    }

    if (existe === false) {

        let id_doc_foto_portada = DataImagenPortada.idDocumento

        const query = `insert into cap_tal_curso ( nombre, descripcion, foto_portada, codigo, etiqueta, fecha_inicio, fecha_termino, id_cargo_operativo, id_facilitador, evaluacion_ponderacion, id_estado, id_doc_foto_portada, fecha_creacion, id_usuario_creador ) 
                values ( $nombre, $descripcion, $imagenPortada, $codigo, $etiqueta, $fechaInicio, $fechaTermino, $cargoOperativo, $facilitador, $evaluacionPonderacion, 1, $id_doc_foto_portada, CURRENT_TIMESTAMP, $idUsuarioCreador) returning id `

        const params = { nombre, descripcion, imagenPortada, codigo, etiqueta, fechaInicio, fechaTermino, cargoOperativo, facilitador, evaluacionPonderacion, id_doc_foto_portada, idUsuarioCreador }

        await sequel.query(query, { bind: params, type: QueryTypes.INSERT, transaction: trx });


    } else {
        mensaje = 'Código ya existe'
    }

    return mensaje
}

       const obtener_datos_editar = async (req) => {
    let { id } = req.params

    const query = ` select 
                        ctc.foto_portada,
                        ctc.codigo,
                        ctc.nombre,
                        ctc.descripcion,
                        ctc.etiqueta,
                        ctc.id_cargo_operativo,
                        ctc.id_facilitador,
                        to_char(ctc.fecha_inicio,'yyyy-mm-dd') as fecha_inicio,
                        to_char(ctc.fecha_inicio,'HH24:MI') as hora_inicio,
                        to_char(ctc.fecha_termino,'yyyy-mm-dd') as fecha_termino,
                        to_char(ctc.fecha_termino,'HH24:MI') as hora_termino,
                        ctc.evaluacion_ponderacion
                    from cap_tal_curso ctc 
                    where ctc.id =  ${id} `

    const rows = await sequel.query(query, { type: QueryTypes.SELECT });

    const obj = {}
    for (let item of rows) {
        obj.foto_portada = item.foto_portada
        obj.codigo = item.codigo
        obj.nombre = item.nombre
        obj.descripcion = item.descripcion
        obj.etiqueta = item.etiqueta
        obj.id_cargo_operativo = item.id_cargo_operativo
        obj.id_facilitador = item.id_facilitador
        obj.fecha_inicio = item.fecha_inicio
        obj.hora_inicio = item.hora_inicio
        obj.fecha_termino = item.fecha_termino
        obj.hora_termino = item.hora_termino
        obj.evaluacion_ponderacion = item.evaluacion_ponderacion
    }

    return obj
}

       const editar_curso = async (req, DataImagenPortada, trx = null) => {
    let { id, imagenPortada, cambioImagenPortada, nombre, descripcion, codigo, etiqueta, cargoOperativo, facilitador, fechaInicio, fechaTermino, evaluacionPonderacion } = req.body;
    let mensaje = 'OK'

    let query_existe = `    select 
                                id 
                            from cap_tal_curso 
                            where upper(codigo) = upper('${codigo}')
                            and id != ${id} `

    const rows = await sequel.query(query_existe, { type: QueryTypes.SELECT });

    let existe = false
    for (let item of rows) {
        existe = true
    }

    if (existe === false) {
        if (cambioImagenPortada === true) {

            let id_doc_foto_portada = DataImagenPortada.idDocumento

            const query = `update cap_tal_curso set 
                            nombre = '${nombre}', 
                            descripcion = '${descripcion}', 
                            foto_portada = '${imagenPortada}', 
                            codigo = '${codigo}', 
                            etiqueta = '${etiqueta}', 
                            fecha_inicio = '${fechaInicio}', 
                            fecha_termino = '${fechaTermino}', 
                            id_cargo_operativo = ${cargoOperativo}, 
                            id_facilitador = ${facilitador}, 
                            evaluacion_ponderacion = ${evaluacionPonderacion}, 
                            id_doc_foto_portada = ${id_doc_foto_portada}, 
                            fecha_actualizacion = CURRENT_TIMESTAMP
                            where id = ${id} `

            await sequel.query(query, { type: QueryTypes.UPDATE, transaction: trx });

        } else {
            const query = `update cap_tal_curso set 
                            nombre = '${nombre}', 
                            descripcion = '${descripcion}', 
                            codigo = '${codigo}', 
                            etiqueta = '${etiqueta}', 
                            fecha_inicio = '${fechaInicio}', 
                            fecha_termino = '${fechaTermino}', 
                            id_cargo_operativo = ${cargoOperativo}, 
                            id_facilitador = ${facilitador}, 
                            evaluacion_ponderacion = ${evaluacionPonderacion}, 
                            fecha_actualizacion = CURRENT_TIMESTAMP
                            where id = ${id} `

            await sequel.query(query, { type: QueryTypes.UPDATE, transaction: trx });
        }

    } else {
        mensaje = 'Código ya existe'
    }

    return mensaje
}

       const eliminar_curso = async (req, trx = null) => {
    let { id } = req.params;
    let mensaje = 'OK'

    const preQuerySolicitud = `delete from cap_tal_solicitud where id_curso = ${id} `
    await sequel.query(preQuerySolicitud, { type: QueryTypes.DELETE, transaction: trx });

    const preQuerySala = `delete from cap_tal_sala where id_curso = ${id} `
    await sequel.query(preQuerySala, { type: QueryTypes.DELETE, transaction: trx });

    const preQuerySeccion = `delete from cap_tal_seccion where id_curso = ${id} `
    await sequel.query(preQuerySeccion, { type: QueryTypes.DELETE, transaction: trx });
   
    const preQueryDocumentacion = `delete from cap_tal_documentacion_online where id_curso = ${id} `
    await sequel.query(preQueryDocumentacion, { type: QueryTypes.DELETE, transaction: trx });
    
    const preQueryEvaluacion = `delete from cap_tal_evaluacion_encuesta where id_curso = ${id} `
    await sequel.query(preQueryEvaluacion, { type: QueryTypes.DELETE, transaction: trx });

    const preQueryCurso = `delete from cap_tal_curso where id = ${id} `
    await sequel.query(preQueryCurso, { type: QueryTypes.DELETE, transaction: trx });

    return mensaje
}

       const publicar_curso = async (req, trx = null) => {
    let { id } = req.params;
    let mensaje = 'OK'

    const query = `  update cap_tal_curso set 
                        id_estado = 2 
                        where id = ${id} `

    await sequel.query(query, { type: QueryTypes.UPDATE, transaction: trx });

    return mensaje
}

       const validar_curso = async (req) => {

    const { id } = req.params;

    const query = ` select 
                        count(ctda.id) as distribucion
                    from cap_tal_curso ctc 
                        inner join cap_tal_seccion cts on cts.id_curso = ctc.id
                        inner join cap_tal_distribucion_asistentes ctda on ctda.id_seccion = cts.id
                    where ctc.id = ${id}`

    return sequel.query(query, { type: QueryTypes.SELECT });
}